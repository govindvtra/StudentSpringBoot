
trigger:
- master

resources:
- repo: self

variables:
   tag: '$(Build.BuildId)'  
   Jforg_Service_Connection: 'Jfrog'
   ACR_Service_Connection: 'Azure Container Registry'
   AKS_Service_Connection: 'AKS'
   Repository: 'mljdemocontainer'
   Image_Pull_Secret: 'mlj-secret'
   Image_Name : 'mljregistry.azurecr.io/mljdemocontainer'

stages:

# Stage 1
# Build Docker Image
# Publish the K8S Files

- stage: Build
  displayName: Build 
  jobs:  
  - job: Build
    displayName: Build and Push to ACR
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Gradle@2
      displayName: Gradle Build 
      inputs:
        gradleWrapperFile: 'gradlew'
        tasks: 'build'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        codeCoverageToolOption: 'JaCoCo'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        gradleOptions: '-Xmx3072m'
        sonarQubeRunAnalysis: false
    - task: CopyFiles@2
      displayName: Copy jar to Staging Directory
      inputs:
        SourceFolder: 'build/libs/'
        Contents: '**/*.jar'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: Publish jar Artifact
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

    # - task: ArtifactoryGenericUpload@2
    #   displayName: Upload jar to Arifactory
    #   inputs:
    #     artifactoryService: '$(Jforg_Service_Connection)'
    #     specSource: 'taskConfiguration'
    #     fileSpec: |
    #       {
    #         "files": [
    #           {
    #             "pattern": "$(Build.ArtifactStagingDirectory)/",
    #             "target": "nuget-local/freshupload/"
    #           }
    #         ]
    #       }
    #     failNoOp: true    

    - task: Docker@2
      displayName: Docker Build an Push to ACR
      inputs:
        containerRegistry: '$(ACR_Service_Connection)'
        repository: '$(Repository)'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: '$(tag)'
    # - task: Docker@2
    #   inputs:
    #     containerRegistry: 'Docker Hub'
    #     repository: 'govindr007/mljapp'
    #     command: 'buildAndPush'
    #     Dockerfile: '**/Dockerfile'
    #     tags: '$(tag)'
    - task: CopyFiles@2
      displayName: Copy AKS Deployment yaml file
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: '**/*.yaml'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    - task: PublishBuildArtifacts@1
      displayName: Publish AKS Deployment yaml file
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'manifests'
        publishLocation: 'Container'


- stage: Deploy
  displayName: Deploy 
  jobs:  
  - job: Deploy
    displayName: Deploy ACR image to AKS cluster
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadPipelineArtifact@2
      displayName: Download AKS Deployment yaml file 
      inputs:
        buildType: 'current'
        artifactName: 'manifests'
        itemPattern: '**/*.yaml'
        targetPath: '$(System.ArtifactsDirectory)'
    - task: KubernetesManifest@0
      displayName: Create Image pull secret 
      inputs:
        action: 'createSecret'
        kubernetesServiceConnection: '$(AKS_Service_Connection)'
        namespace: 'default'
        secretType: 'dockerRegistry'
        secretName: '$(Image_Pull_Secret)'
        dockerRegistryEndpoint: 'Azure Container Registry'
    - task: KubernetesManifest@0
      displayName: Deploying to AKS Cluster
      inputs:
        action: 'deploy'
        kubernetesServiceConnection: '$(AKS_Service_Connection)'
        namespace: 'default'
        manifests: '$(System.ArtifactsDirectory)/Kubectl.yaml'
        containers: '$(Image_Name):$(tag)'
        imagePullSecrets: '$(Image_Pull_Secret)'
    # - task: KubernetesManifest@0
    #   inputs:
    #     action: 'deploy'
    #     kubernetesServiceConnection: 'AKS'
    #     namespace: 'default'
    #     manifests: '$(System.ArtifactsDirectory)/Kubectl.yaml'
    #     containers: 'govindr007/mljapp:$(tag)'
    #     imagePullSecrets: 'mlj-secret'