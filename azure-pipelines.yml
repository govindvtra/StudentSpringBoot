# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
   tag: '$(Build.BuildId)'  

steps:
    - task: Gradle@2
      inputs:
        gradleWrapperFile: 'gradlew'
        tasks: 'build'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        codeCoverageToolOption: 'JaCoCo'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        gradleOptions: '-Xmx3072m'
        sonarQubeRunAnalysis: false
    - task: CopyFiles@2
      inputs:
        SourceFolder: 'build/libs/'
        Contents: '**/*.jar'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

    - task: ArtifactoryGenericUpload@2
      inputs:
        artifactoryService: 'Jfrog'
        specSource: 'taskConfiguration'
        fileSpec: |
          {
            "files": [
              {
                "pattern": "$(Build.ArtifactStagingDirectory)/",
                "target": "nuget-local/freshupload/"
              }
            ]
          }
        failNoOp: true    

    - task: Docker@2
      inputs:
        containerRegistry: 'Azure Container Registry'
        repository: 'mljdemocontainer'
        command: 'buildAndPush'
        Dockerfile: '**/Dockerfile'
        tags: '$(tag)'