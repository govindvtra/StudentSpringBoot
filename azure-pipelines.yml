# Gradle
# Build your Java project and run tests with Gradle using a Gradle wrapper script.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
   tag: '$(Build.BuildId)'  
   Jforg_Service_Connection: 'Jfrog'
   ACR_Service_Connection: 'Azure Container Registry'
   Repository: 'mljdemocontainer'
   
steps:
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'SonarCloud'
        organization: 'mljdemo'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'mljdemo'
        cliProjectName: 'mljdemo'
        cliSources: './build/classes'
        extraProperties: |
          # Additional properties that will be passed to the scanner, 
          # Put one key=value per line, example:
          # sonar.exclusions=**/*.bin
          #sonar.exclusions=**/*.java

    - task: Gradle@2
      displayName: Gradle Build 
      inputs:
        gradleWrapperFile: 'gradlew'
        tasks: 'build'
        publishJUnitResults: true
        testResultsFiles: '**/TEST-*.xml'
        codeCoverageToolOption: 'JaCoCo'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        gradleOptions: '-Xmx3072m'
        sonarQubeRunAnalysis: false
    - task: SonarCloudAnalyze@1
    - task: CopyFiles@2
      displayName: Copy jar to Staging Directory
      inputs:
        SourceFolder: 'build/libs/'
        Contents: '**/*.jar'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: Publish jar Artifact
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

    # - task: ArtifactoryGenericUpload@2
    #   displayName: Upload jar to Arifactory
    #   inputs:
    #     artifactoryService: '$(Jforg_Service_Connection)'
    #     specSource: 'taskConfiguration'
    #     fileSpec: |
    #       {
    #         "files": [
    #           {
    #             "pattern": "$(Build.ArtifactStagingDirectory)/",
    #             "target": "nuget-local/freshupload/"
    #           }
    #         ]
    #       }
    #     failNoOp: true    

    # - task: Docker@2
    #   displayName: Docker Build an Push to ACR
    #   inputs:
    #     containerRegistry: '$(ACR_Service_Connection)'
    #     repository: '$(Repository)'
    #     command: 'buildAndPush'
    #     Dockerfile: '**/Dockerfile'
    #     tags: '$(tag)'